#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 10000000//sort edilecek eleman sayısı
void insertion(int arr[SIZE],int size)
{
	int i=1,j=0,key=0;
	for(i=1;i<size;i++)
	{
		key=arr[i];
		j=i-1;
		while(j>-1 && arr[j]>key)
		{
			arr[j+1]=arr[j];
			j=j-1;
			
		}
		arr[j+1]=key;
	}
	
}
void merge(int arr2[SIZE],int left,int middle,int right)
{
	int left_size,right_size,i=1,j=1,k=0;
	left_size=middle-left+2;
	right_size=right-middle+1;
	int *left_array=(int*)malloc(sizeof(int)*left_size);
	int *right_array=(int*)malloc(sizeof(int)*right_size);
	for(i=0;i<left_size-1;i++)
	{
		left_array[i]=arr2[left+i];
	}
	for(i=0;i<right_size-1;i++)
	{
		right_array[i]=arr2[middle+i+1];
	}
	left_array[left_size-1]=-1;
	right_array[right_size-1]=-1;
	i=0;
	j=0;
	for(k=left;k<=right;k++)
	{
if((left_array[i]<=right_array[j]&&(left_array[i]!=-1))||right_array[j]==-1)
		{
			arr2[k]=left_array[i];
			i++;
		}
		else
		{
			arr2[k]=right_array[j];
			j++;
		}
	}
}
void merge_sort(int arr2[SIZE],int left,int right)
{
	int middle=0;
	if(left<right)
	{
		middle=(left+right)/2;
		merge_sort(arr2,left,middle);
		merge_sort(arr2,middle+1,right);
		merge(arr2,left,middle,right);
	}
}


int main()
{
	
	int arr[SIZE];
	int arr2[SIZE];
	int i=0;
	double sec;
	clock_t start,finish;
	int time_insertion=0,time_merge=0;
	srand(time(NULL));
	for(i=0;i<SIZE;i++)
	{
		arr[i]=rand();
		arr2[i]=arr[i];
	
	}
	start = clock();
	insertion(arr,SIZE);
	finish = clock();
	sec = (finish-start)/(double)CLOCKS_PER_SEC;
	printf("insertion sort for %d element ->%f\n",SIZE,sec);

	start = clock();
	merge_sort(arr2,0,SIZE-1);
	finish = clock();
	sec = (finish-start)/(double)CLOCKS_PER_SEC;
	printf("merge sort for %d element ->%f\n",SIZE,sec);
system("pause");
	return 0;
}
